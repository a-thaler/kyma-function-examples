apiVersion: serverless.kyma-project.io/v1alpha2
kind: Function
metadata:
  name: svc-b
  labels:
    demo: traces
spec:
  scaleConfig:
    maxReplicas: 1
    minReplicas: 1
  runtime: nodejs20
  labels:
    sidecar.istio.io/inject: "true"
  source:
    inline:
      source: |-
        const axios = require("axios");
        const opentelemetry = require('@opentelemetry/api');
        const meter = opentelemetry.metrics.getMeter('svc', '0.1.0');
        const counter = meter.createCounter('svc.calls.total', { description: 'Counts the number of calls' });

        module.exports = {
            main: async function (event, context) {

              // Create Span
              const span = event.tracer.startSpan('call-to-svc-c');

              var response;
              try{
                response = await callService(event, span, counter);

                // Enrich Span in Success Case
                span.setStatus({code: response.status});
                span.addEvent("my special context log, might be a stack trace even");
                span.setAttribute('tenant', "myTenant");

                return response.data
              } catch (error) {
                handleError(error, event, span, counter)

                // Enrich Span in Error Case
                span.recordException(error);
                span.setStatus({ code: opentelemetry.SpanStatusCode.ERROR });

                return
              }finally{
                // Close Span
                span.end();
              }              
          } 
        };

        async function callService(event, span, counter){
          console.debug(JSON.stringify({
            "level": "debug",
            "traceId": span.spanContext().traceId,
            "message": "Incoming request to svc-b"
          }));
          
          response = await axios.post("http://svc-c.example:80", event.data, {"Content-Type": "application/cloudevents+json"});

          console.info(JSON.stringify({
            "level": "info",
            "traceId": span.spanContext().traceId,
            "http.status": response.status,
            "message": "Upstream service svc-c called"
          }));
          counter.add(1, { status: response.status });
          event.setResponseStatus(response.status)
          return response
        }

        function handleError(error, event, span, counter){
          console.error(JSON.stringify({
            "level": "error",
            "traceId": span.spanContext().traceId,
            "message": "Call to upstream service svc-c failed with: " + error.message
          }));

          counter.add(1, { status: '500' });

          event.setResponseStatus(500)
        }
      dependencies: |-
        {  
          "name": "svc-b",
          "version": "1.0.0",
          "dependencies":{
            "axios": "^0"
          }
        }