apiVersion: serverless.kyma-project.io/v1alpha2
kind: Function
metadata:
  name: load-generator
spec:
  scaleConfig:
    maxReplicas: 1
    minReplicas: 1
  runtime: nodejs20
  labels:
    sidecar.istio.io/inject: "true"
  source:
    inline:
      source: |-
        const axios = require("axios");
        const opentelemetry = require('@opentelemetry/api');

        const meter = opentelemetry.metrics.getMeter('svc', '0.1.0');
        const counter = meter.createCounter('svc.trigger.total', { description: 'Counts the number of invocations' });

        loop();

        async function loop(){
          const delay = 60*1000;
          console.debug(JSON.stringify({
            "level": "info",
            "message": "Starting with delay of " + delay + "ms"
          }));

          while (true) {
            var response;
            try {
              response = await axios.post("https://svc-a.c-2bb323d.stage.kyma.ondemand.com", {}, {"Content-Type": "application/cloudevents+json"});
              counter.add(1, { status: response.status });

              console.debug(JSON.stringify({
                "level": "debug",
                "message": "Triggered svc-a and got a response of " + response.status
              }));
            } catch (error) {
              console.error(JSON.stringify({
                "level": "error",
                "message": "Triggered svc-a and got an error with message " + error.message
              }));
            }

            await sleep(60*1000);
          }
        }

        function sleep(ms) {
          return new Promise((resolve) => {
            setTimeout(resolve, ms);
          });
        }

        module.exports = {
            main: async function (event, context) {

              
              return
          }
        };
      dependencies: |-
        {  
          "name": "svc-c",
          "version": "1.0.0",
          "dependencies":{
            "axios": "^0.21.1"
          }
        }
