apiVersion: serverless.kyma-project.io/v1alpha2
kind: Function
metadata:
  name: svc-a
  labels:
    demo: logs
spec:
  scaleConfig:
    maxReplicas: 1
    minReplicas: 1
  runtime: nodejs20
  labels:
    sidecar.istio.io/inject: "true"
  source:
    inline:
      source: |-
        const axios = require("axios");
        const opentelemetry = require('@opentelemetry/api');
        const meter = opentelemetry.metrics.getMeter('svc', '0.1.0');
        const counter = meter.createCounter('svc.calls.total', { description: 'Counts the number of calls' });

        module.exports = {
            main: async function (event, context) {
              const span = init(event);
              
              // Log unstructured
              console.debug("level=debug traceId=" + span.spanContext().traceId + " message=Incoming request to svc-a (raw)");

              // Log structured
              console.debug(JSON.stringify({
                "level": "debug",
                "traceId": span.spanContext().traceId,
                "message": "Incoming request to svc-a (JSON)"
              }));
        
              return await callService(event, span, counter)
          }
        };

        function init(event){
          return event.tracer.startSpan('call-to-svc-b');
        }

        async function callService(event, span, counter){
          var response;
          try{
            response = await axios.post("http://svc-b.demo:80", event.data, {"Content-Type": "application/cloudevents+json"});

            console.info(JSON.stringify({
              "level": "info",
              "traceId": span.spanContext().traceId,
              "http.status": response.status,
              "message": "Upstream service svc-b called"
            }));

            span.setStatus({code: response.status});

            counter.add(1, { status: response.status });

            event.setResponseStatus(response.status)
            return response.data
          } catch (error) {
            console.error(JSON.stringify({
              "level": "error",
              "traceId": span.spanContext().traceId,
              "message": "Call to upstream service svc-b failed with: " + error.message
            }));

            span.recordException(error);
            span.setStatus({ code: opentelemetry.SpanStatusCode.ERROR });

            counter.add(1, { status: '500' });

            event.setResponseStatus(500)
            return
          }finally{
            span.end();
          }
        }
      dependencies: |-
        {  
          "name": "svc-a",
          "version": "1.0.0",
          "dependencies":{
            "axios": "^0"
          }
        }
